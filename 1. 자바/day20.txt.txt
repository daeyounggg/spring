컬렉션 프레임워크

컬렉션 프레임워크란?

컬렉션(Collection) : 데이터군 - 자료

프레임워크(Framework) : 표준화된 설계

데이터군을 다루는데 필요한 표준화된 설계 틀

자료 구조 -> 설계

1) 순차 자료구조
2) 집합 자료구조
3) 사전 자료구조

데이터의 추가, 조회, 삭제


컬렉션 프레임워크 핵심 인터페이스
1. List 인터페이스 : 순차 자료구조
	1) 순서가 유지되는 자료 : 배열 
	2) 값은 중복이 가능
	3) 구현 클래스
	   ArrayList 
		- 배열을 구현한 클래스
		- 물리적 배열로 구성 됨.
		- 조회 속도가 빠름
		기본 배열 크기는 10
  	   	 10개를 넘으면 기존 배열을 버리고 2배크기의 새로운 배열을 생성
	  	- 쓰레드 안정성 X
		- 순서가 변경되는 변화 -> 새로운 배열 생성 -> 효율성 X
		- 추가, 수정, 삭제 -> 성능 저하

	  LinkedList
	    - 요소간의 연결 순서가 결정
	    - ArrayList 보다는 조회 속도는 불리
	    - 요소의 추가, 수정, 삭제는 빠르다.

	   Vector
		- 배열을 구하는 클래스
 		- 물리적 배열로  구성됨
		- 쓰레드 안정성 O
		- 과거의 소스와 호환성 유지 차원
	   Stack   
		- push(E e) : 뒤에 추가
		- E pop() : 뒤에서 꺼내기

	   Queue 
		- offer(E e) : 앞에 추가
		- poll() : 앞에서 꺼내기
	   ...

	데이터 추가
	  add(....)
	  add(int index, E e)

	데이터 조회
	  E get(int index) : 순서 번호로 조회
	  boolean contains(Object o) : 특정 요소가 존재하면 true
	  int indexOf(Object o) : 특정 요소가 있는 위치 값 반환(0부터 시작)
			       - 없으면 -1 반환
			       - 왼쪽 -> 오른쪽	
	  int lastIndexOf(Object o) : 특정 요소가 있는 위치 값 반환
				- 없으면 -1 반환
				- 오른쪽 -> 왼쪽
	  int size() : 요소의 갯수


	데이터 삭제
	  E remove(int index) : 순서 번호로 요소 삭제
	  remove(Object o)	  

	데이터 변경
	  E set(int index, E e) 	  

	
2. Set 인터페이스 : 집합 자료구조
	1) 중복을 허용하지 않는다.
	2) 순서 유지 X
	3) 구현클래스
	    - HashSet
	 
	    - TreeSet
		- HashSet + 정렬(SortedSet)
		- java.lang.Comparable : 정렬의 기준이 되는 인터페이스
			: int compareTo :

		- java.util.Comparator : Comparable의 compareTo의 대안적인 정렬 기준
		  int compare(T t1, T t2);

		참고)
		Stirng
			compareTo : 오름차순 정렬

	데이터 추가
		add(E e)

	데이터 조회
		boolean contains(Object o)
			
		int size()
	데이터 제거
		boolean remove(Object o)
	


3. Map 인터페이스 : 사전 자료구조
	1) 키 - 값의 쌍 구조
	2) 키는 값을 찾기위한 키워드 : 중복 X (집합자료)
	3) 값은 중복 O
	4) 구현클래스
	   HashMap
	   TreeMap
		- Key의 정렬

	참고)
		Hashtable
		properties
 	
	데이터 추가
		V put(K k, V v) : k가 없으면 추가, k 있으면 수정
		V putIfAbsent(K k, V v) : k가 없을때만 추가
		void putAll(Map ...) : 

	데이터 조회
		V get(Object key) : key를 가지고 조회
		V getOrDefault(Object key, V defaultValue) : key로 조회시 검색된 데이터가 없는 경우 defaultValue를 반환
		
		boolean contains(Object key)
		boolean containsValue(Object value)
		int size() : 요소 갯수

	데이터 삭제
		V remove(Object key)
		boolean remove(Object key, Object value);

	데이터 변경
		replace(...)



	put(key, value)
		-> Map,Entry 구현 클래스의 객체(key - value pair) -> []table...

Stack 과 Queue

반복자 - 표준화
Iterator
- Collection 인터페이스에 Iterator<E> iterator가 정의되어 있다.
- boolean hasNext() : 다음 요소가 있는지 체크
- E next() : 다음 요소를 추출
- 반복을 다하면 종료, 재활용 X

ListIterator
- List에만 정의된 iterator
- 순방향, 역방향
- 

Enumeration
 - boolean hasMoreElements() :  다음 요소가 있는지 체크
 - V nextElement();

참고)
GoF(Gang of Four) 디자인패턴



java.util
Arrays
1. 배열의 복사 - copyOf(), copyOfRange()
2. 배열 채우기 - fill(), setAll()
3. 배열의 정렬과 검색 - sort(), binarySearch()
4. 문자열 배열

deepToString(...) : 2차원 배열 이상

Collections
	- 컬렉션의 편의기능
	- java.util

참고)
정렬기준
java.lang.Comparable
int compareTo

java.util.Comparator
int compare


열거형
1. 열거형이란?
 - 용도가 한정된 클래스의 일종
 - 상수만을 위한 클래스
 - 생성자는 무조건 private : 내부에서만 객체 생성 가능
  
2. 열거형 정의와 사용
 - enum 클래스명 {
 	상수명, 상수명, ...
 }
 
3. 모든 열거형의 상위 클래스 - java.lang.Enum
 - java.lang.Enum 클래스의 하위 클래스

4. Enum 클래스에 정의된 메서드
 String name() : 상수이름(BUS,SUBWAY,TAXI)
 int ordinal() : 상수의 순서 번호(0부터 시작)
 static String valueOf(Class<E>, String name)

5. 컴파일러가 자동으로 추가해주는 메서드
 
 E valueOfString(name);


 참고)
	Enum 클래스의 각 상수는 정의된 Enum 클래스의 정적 상수 객체
6. 열거형에 멤버 추가하기
7. 열거형에 추상메서드 추가하기

애노테이션(annotation)
 - 주석, 주해 : 설명
 - 정보 전달
 - @interface 애노테이션명 { -> extends java.lang.annotation.Annotation

 }

1. 애노테이션이란?
2. 표준 에너테이션
 - JDK에 기본 정의된 에너테이션
@Override
@Dprecated
...

3. 메타 에노테이션
 - 에노테이션을 정의 할 수 있는 애너테이션
 - @Target : 적용 대상
	ElementType
	.TYPE
	.METHOD
	.FIELD
	.PARAMETER
	.CONSRTUCTOR
	...
 
 - @Retention : 정보 전달 시점
	RetentionPolicy
		.SOURCE : java 소스 상에 존재, class 파일에서 제거, 정보전달 시점 : 컴파일 시 
			 예) @Override
		.CLASS : 기본값, java 소스상, class 파일에 존재, 정보 전달 시점 X
		.RUNTIME : java 소스상, class 파일에도 존재, 정보 전달 시점 : 실행 중

4. @interface ...
	- java.lang.annotation.Annotation 의 하위 인터페이스


Class 클래스의




람다식

1.람다식이란?
- 메서드를 하나의 식으로 표현

- 함수형 프로그래밍
  - 함수 - 단일 기능
  - 함수가 값
     - 매개변수로 사용가능
     - 반환 값으로 사용가능

  - 자바는 함수가 함수, 값으로 절대 사용 X

2. 람다식 문법 살펴보기
- 인터페이스 : 객체가 되는 조건 (지역, 멤버 변수) -> 식으로 표현	

1) 인터페이스명, 함수명 생략
2) 매개변수, 코드 구현부분({...}) ->
3) 자료형 생략가능
4) 구현 코드가 한줄 -> {...} 생략가능
    (반드시 return 예약어도 생략)
5) 매개변수의 변수명도 최대한 짧게 쓰는게 관례(1자)
6) 매개변수가 1개이면(...) 생략 가능
7) 매개변수가 없을땐 () 생략 불가

3. 람다식 사용하기
4. 함수형 인터페이스(Functional Interface)
 - 람다식의 형식 체크 : 단일 기능으로써 1개 메서드만 정의 되어 있는지
 @FunctionalIterface

5. 함수형 인터페이스 타입의 매개변수와 반환 타입
6. java.util.function 패키지
 - 일반적으로 정의하는 함수의 유형을 인터페이스로 정의 제공

Supplier : T get() - 매개변수 X, 반환값 O
Consumer : void accept(T t) - 매개변수 O, 반환값 X
Function<T, R> : R apply(T t) - 매개변수 O, 반환값 O
Predicate : boolean test(T t) : 매개변수 O, 반환값 boolean

- 매개변수가 2개인 인터페이스 - Bi
BiConsumer : void accept(T t, U u)
BiFunction<T,U,R> : R apply(T t, U u)
BiPredicate<T,U> : boolean test(T t, U u)

- 매개변수와 반환값 자료형이 같은 경우
	- 매개변수가 1개
	UnaryOperator<T> : T apply(T t); == Function <T, T>
	- 매개변수가 2개
	BinaryOperator<T> : T apply(T t1, T1, t2); == BiFurnction<T, T, T>

- 기본형 타입 함수형 인터페이스 정의

7. Function의 합성과 Predicate의 결합 
	Function
	  - 함수의 결합
	     andThen()
	     compose()

	  - 항등 함수
	    identity() : x -> x



8. Predicate의 결합
	- 조건식의 결합 : 논리 연산자
	- and(Predicate ...)
	- or(Predicate ...)
	- negate() : 부정 (참 -> 거짓, 거짓 -> 참)

9. 메서드 참조
 - 짧은게 좋다.
 













