메서드 참조
	- 람다식 : 짧게 쓰는것이 권장사항 
	- java.util.function 패키지
	- 반환값 O, 매개변수 X - Supplier<R>::R get()
	- 반환값 X, 매개변수 O - Consumer<T>::void accept(T t);
	- 반환값 O, 매개변수 O - Function<T, R>:: R apply(T t);
	- 반환값 boolean, 매개변수 O : Predicate<T>:: boolean test(T t)
	- Bi : 매개변수 2개
		BiConsumer, BiFunction, BiPredicate 
	- UnaryOperator<T> : Function<T, T>
	- BinaryOperator<T> : BiFunction<T, T, T>
	- 기본형을 처리할 수 있는 함수형 인터페이스가 정의 
		예) IntToLongFunction 
		
	- 컴파일러가 충분히 예측 가능한 부분은 생략 가능 - 축약 표현 
	
스트림(Stream)
java.util.stream

참고)
java.util.Arrays
java.util.Collections 

1. 스트림이란?
- 데이터 소스가 무엇이든(배열이든, 콜렉션(List, Set)이든) 간에 같은 방식(Stream에 정의된 방식)으로 다룰 수 있게 데이터를 추상화 
- 데이터를 다루는데 자주 사용되는 메서드들을 정의
- 스트림은 데이터 소스를 변경하지 않는다.
- 스트림은 일회용이다.
- 스트림은 작업을 내부 반복으로 처리한다.

2. 스트림의 연산
- 중간 연산 
	- 반환값이 Stream인 연산 
	
- 최종연산 
	- 반환값이 Stream 아닌 연산 

3. 지연된 연산
	- 중간 연산은 최종 연산이 호출되기 전까지는 연산  X
	- 최종 연산이 호출되어야 연산이 수행되고 소비된다.
	
4. 기본자료형을 다루는 스트림
	- 연산의 효율성 (오토박싱, 언박싱 X)
	- 숫자에 특화된 메서드를 제공 (특정 연산, 통계용 메서드)
	
	Stream<Integer> -> IntStream :  mapToInt, mapToDouble, mapToLong .... 
	IntStream -> Stream<Interger> : boxed()
	
	IntStream
	DoubleStream 
	LongStream ....
	
	참고)
		map(Function<T, R> ....) : 데이터의 변환
	
	
5. 스트림만들기
- Stream 객체로 변환 

1) 컬렉션 
		Collection 인터페이스 
			Stream<E> stream()
			- 적용 범위 List, Set 
			
2)  배열 
		Arrays.stream(배열 ...)


3) 각 Stream 인터페이스 
	.of(T... values) 
	.of(int... values)

6. 특정 범위의 정수
	IntStream, LongStream	
		range(...)
		rangeClosed(....)
		
7. 임의의 수
	java.util.Random
		무한 난수를 발생시키는 스트림
		IntStream ints()  : INT 범위 내의 난수 (-2^32 ~ 2^32 -1)
		LongStream longs() : Long 범위 내의 난수 (-2^63 ~ 2^63 - 1)
		DoubleStream doubles() : 0~1

8. iterate(), generate()
static Stream<T> iterate(T seed, UnaryOperator<T> f);

static Stream<T> generate

9. concat()
	- 스트림을 연결 -> 하나의 스트림 
	
	static Stream<T> concat(Stream<T> stm1, Stream<T> stm2);

중간연산 
10. 
skip() - 건너뛰기 
limit() - 갯수 제한

11.  
filter(Predicate<T> ...) : Predicate의 test 메서드에서 true -> 통과, false -> 미통과 
distinct() : 중복 제거

12. sorted()

변환 메서드 : Function<T,R> 

13. map()

14. 
mapToInt()
	Stream<Integer> -> IntStream	
mapToLong() 
	Stream<Long> -> LongStream
mapToDouble()
	Stream<Double> -> DoubleStream

	1) 성능의 향상(오토박싱, 언박싱 X)
	2) 숫자에 특화된 메서드를 제공
	(합계, 평균, 갯수, 통계)

15. peek()
	참고) forEach와 비슷하게 동작
	       void forEach는 최종연산
	       Stream<T> peek(...) : 중간 연산
	- 중간 부분에서 값을 확인할때 주로 사용

Optional와 OptionalInt
JDK8 - NullPointerException
- null에 대한 다양한 처리를 하기위해 도입된 클래스
- Wrapper 클래스

1. Optional 객체 생성하기
   static of(...) : null은 미허용
	ofNullable(...) : null도 허용

2. Optional 객체의 값 가져오기
- 다양한 메서드
- T get() : 있으면 가져오고 없으면 NoSuchElementException 발생
- orElse(T t) : 있으면 가져오고 없으면 t 값으로 대체
- ofElseGet(Supplier<T> supplier)
- orElseThrow()
- orElseThrow(Supplier<T> supplier)

3. OptionalInt, OptionalLong, OptionalDouble
 - 기본형을 처리할 수 있는 Optional 클래스
 - 성능 향상

 참고) getAsInt()


class Optional<T> ....{
	.....
	private T value;
	.....
}

스트림의 최종 연산 : 반환값이 Stream이 아닌 연산
1. forEach()
2. 
boolean allMatch(...) : 모두 참인지 체크
boolean anyMatch(...) : 하나라도 참인지 체크 
boolean noneMatch(...) : 모두 거짓이면 참
-> 매개변수가 Predicate

boolean findFirst() : 첫번째 요소
boolean findAny() : 병렬 스트림 처음 등장하는 요소

3.  
count() - 요소갯수 (Stream,IntStream,LongStream,DoubleStream

- 기본 자료형 스트림
sum(), average()

max() - 일반 스트림 : 정렬시 가장 마지막 위치, 기본자료형 스트림 - 최대값
min() - 일반 스트림 : 정렬시 가장 첫번째 위치, 기본자료형 스트림 - 최소값

4. reduce()

5. collect(Collectors ...)
	- Collectors.joining()

참고)
 java.util.stream.Collectors : collect 메서드 전용 편의 메서드가 정의(Collector ...)

toList() : List로 변환 : 사용빈도가 매우 높은 메서드 -> Stream List 인터페이스에도 자체적으로 정의
toSet() : Set로 변환
toMap(Function <T,R> keyMapper, Function<T,R> valueMapper) : Map으로 변환 
toCollection(Supplier <T> supplier) : ArrayList, LinkedList, HashSet, TreeSet ...
toArray() : 배열로 변환 : Stream, 기본 자료형 Stream 인터페이스에 정의
groupingBy() - 그룸이 2그룹 이상인 경우
partitioningBy() - 2그룹으로 나눌때, 참, 거짓