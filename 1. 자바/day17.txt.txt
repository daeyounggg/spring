형식화 클래스
java.text 패키지

1. DecimalFormat - 숫자 형식화
 0: 없는 자리수는 0으로 채워 넣는다.
 #: 없는 자리수는 출력안함

2. SimpleDateFormat - 날짜 형식화
 - java.util.Date
 - 

3. ChoiceFormat
 - 특정 범위에 속하는 값을 문자열로 변환

4. MessageFormat
 - 

format() : 자바 객체 -> 형식화된 문자열
parse() : 형식화된 문자열 -> 자바 객체

날짜와 시간
1. Date - JDK 1.0
2. Calendar - JDK 1.1
  - 생성자 메서드 protected : 직접 new 연산자를 통해서 생성불가
  - static Calendar getInstance() : 객체 생성후 조회
  - 그레고리력 (서기) : 
  - 불기

  Locale : 지역화 클래스
          - GregorianCalendar()
          - Budi....
 
 - 날짜,시간 조회
   .get(날짜, 시간 항목 필드 상수)

 - 날짜,시간 변경
   .set(날짜, 시간 항목 필드 상수, 값);
   .add(필드명, 값) : 날짜 시간을 뒤로 옮기거나 - 값이 양수, 앞으로 변경 - 값이 음수 
   .roll(필드명, 값); : 필드 내에서만 변동
   .roll(필드명,true); 시간을 한칸 뒤로
   .roll(필드명,false); 시간을 한칸 앞으로

 - 단점
  1) 날짜 변경시 원 객체가 변동 / 원 객체는 사용 불가
  2) add()가 날짜,시간 가감 - 명칭에서 오는 혼동
  3) 시간 단위, 필드에 대한 상수가 너무 한 곳에 몰려 있는 단점

	
java.time 패키지
- java.time : 핵심 클래스 (날짜, 시간)
- java.time.format : 형식화 / DateTimeFormatter (자바 객체 -> 형식화된 날짜 문자열)
- java.time.temporal : 날짜 시간 필드, 단위
 	TemporalField - ChronoField : 날짜 시간 필드
	TemporalUnit - ChronoUnit : 날짜 시간 단위
- java.time.zone : 시간대
	Zonedld
	ZonedOffset

1.핵심 클래스
1) LocalDate - 날짜
 -> LocalDateTime 변환 메서드
 -> LocalDateTime atTime(LocalTime localtime);

2) LocalTime - 시간
 -> LocalDateTime 변환 메서드
 -> LocalDateTime atDate(LocalDate localDate);

3) LocalDateTime - 날짜/시간
	          - LocalDate + LocalTime
	 
4) ZonedDateTime - 날짜/시간 + 시간대
 - ZoneId 	- LocalDateTime + 시간대(Zoneld...)
		- ZoneId.of("시간대 ID");
		   예) Asia/Seoul
 		      - withZoneSameInstance() : 각 시간대별 현재 시간

		      - 서머타임제 : 고려해서 반영

5) OffsetDateTime - 날짜/시간 + 시간대
 - ZonedOffset	- LocalDateTime + 시간대(ZonedOffset...)
		- 시간 차이 +9 // 물리적 시간차이
 		- withOffsetSameInstance() : 각 시간 차이별 현재 시간

- 날짜와 시간 객체 생성
  - of(int year....) : 직접 날짜와 시간을 지정
  - now() : 현재 지금 날짜 시간


- 특정 필드의 값 가져오기 - get(), getXXX()
 - TemporalField field
    - enum ChronoField
 - int get(TemporalField field);

참고)
DayOfWeek::getDisplayName(TextStyle,Locale locale); - 요일 표기

- 필드의 값 변경하기 - with(), plus(), minus(); 
  - 반환값이 새로운 객체 / 기존 시간의 불변성 유지
  - with() : 날짜, 시간 변경
	- with(TemporalField field, int value);
	- withXxx(int value);

  - plus() : 날짜 시간(+)
	- plus(long value, TemporalUnit field); - 잘 안씀
	- plusXxx(long value); 

  - minus() : 날짜 시간(-)
	- minus(long value, TemporalUnit field); - 잘 안씀
	- minusXxx(long value);

참고)
 ChronoUnit : 날짜, 시간 단위

- 날짜와 시간의 비교 - isAfter(), isBefore(), isEqual()
- LocalTime의 truncatedTo()

2. Period 와 Duration
 - Period : betwwen()과 until()
 - Duration : of(), with()
 - 다른 단위로 변환 - toTotalMonths(), toDays(), toHour(), toMinutes()

Period : 날짜 사이 간격(년,월,일) - LocalDate
Duration : 시간 사이 간격(초,나노초) - LocalTime

- TemporalAmount 인터페이스 - 설계 틀

Instant
 - EpochTime : Timestamp
    - 1970.1.1 자정(UTC-0) : 1/1000초

 - System.currentTimeMillis()

 - Date, Calendar 클래스에서 변환 객체로 활용


파싱과 포맷
1. DateTimeFormatter
      ofPattern("...") : 형식화할 날짜 시간 패턴
      .format("TemporalAccessor ...) : 형식화

2. 문자열을 날짜와 시간으로 파싱하기
    핵심 클래스의 메서드
	parse

	예) LocalDateTime
		.parse()


format(...) : 자바 객체 -> 형식화된 문자열
parse(...) : 형식화된 문자열 -> 자바 객체

















