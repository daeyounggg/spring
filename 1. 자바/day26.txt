입출력(I/O)
java.io

1. 입출력이란?
Input - 입력 Output - 출력

2.스트림(stream)
- 데이터 운반하는데 사용되는 연결통로
- 추상클래스
- 입력 스트림 : 입력받는 통로
	- 바이트단위 입력 스트림(InputStream)
	- 문자단위 입력 스트림(Reader)

- 출력 스트림 : 출력하는 통로
	- 바이트 단위 출력 스트림(OutPutStream)
	- 문자단위 출력 스트림(Writer)
 
바이트기반 스트림
1. InputStream : 추상 클래스
	- int read()
		-> 파일 데이터를 다 읽으면 -1 반환
		-> 1byte씩 한칸씩 이동하면서 읽기 -> 효율성 떨어진다(준비에 소요되는 비용이 읽기 비용보다 더 크다)
		-> 효율성을 증대 시키려면 버퍼를 고려

             unsigned byte (1) - 양의 정수
		- -1은 표현 X

             byte범위 숫자(0~255)  + -1 > short, int, long
	
	- int available() : 남아있는 바이트 수 반환, 0 -> 다 읽음

	- int read(byte[] b) - 버퍼 메모리공간
		- 버퍼에 읽어온 데이터 기록
		- 반환값 : 읽어온 바이트 수

	- close() : 자원 해제 / AutoCloseable 인터페이스 구현 클래스이면 try ~ with resources 구문을 사용해서 자동 해제


   기반 스트림
 	- 직접 데이터 소스에 접근하는 스트림
 	예) 파일

	FileInputStream : 파일 기반 스트림
	ByteArrayInputStream : 메모리 기반 스트림

   보조 스트림
	- 다른 스트림에 추가 기능을 더해주는 스트림(기존 기능에 추가해주는 것)
	- FilterInputStream의 하위 클래스
		- BufferedInputStream : 버퍼 기능 제공, 기본 버퍼 8kb
		- DataInputStream
			- 읽어오는 자료형 순서가 반드시 일치 : 정확하게 읽을수 있다
			- 같은 자료형으로 주로 사용 된다
			- 파일에 끝에 도달한 경우  EOFException 발생 (End Of File...)
			
		- ObjectInputStream
		
		참고)
		- InputStreamReader : 바이트 단위 읽기 스트림 -> 문자 단위 읽기 스트림
	
		기타) 
		- SequenceInputStream -> 두개의 입력 스트림을 하나로 합칠때

2. OutputStream	
	void write(int byte)

	기반 스트림
	 - 직접 데이터에 접근하는 스트림
	 - FileOutputStream : 파일에 출력하는 스트림 / 1바이트씩 출력	
	 - ByteArrayOutputStream : 메모리에 출력하는 스트림

	1 바이트(0~255 - ASCII)
	
	'안' -> 유니코드(2) : 50504


	보조 스트림
	 - 기존 스트림 + 추가 기능
	 - FilterOutputStream
		- BufferedOutputStream
			- flush() : 버퍼 비우기
			- close() : 버퍼 비우기(flush() - close())

		- DataOutputStream
			- 주로 같은 자료형 사용
	ObjectOutputStream
	OutputStreamWriter : 바이트 단위 출력 스트림 -> 문자 단위 출력 스트림

문자 기반 스트림
1. Reader : 추상 클래스 : 입력 스트림
	기반 스트림
	- 데이터를 직접 접근 하는 스트림
	
	- FileReader : 파일을 직접 접근하는 문자단위 입력 스트림
	- CharArrayReader : 메모리 기반 문자 단위 입력 스트림
	- StringReader

	보조 스트림
	- 기존 스트림 + 추가 기능 
	- BufferedReader : 기존 스트림 + 버퍼 추가 기능

2. Writer : 추상 클래스
	기반 스트림
	- FileWriter : 파일을 직접 접근해서 출력하는 문자 단위 스트림
	- CharArrayWriter : 메모리 기반
	- StringWriter : 메모리 기반

	참고) 
	PrintWriter
	printStream
		- print, println, printf 와 같은 메서드 추가

	보조 스트림
	- BufferedWriter : 기존 스트림 + 버퍼 추가 기능

GoF(Gang Of Four) 디자인 패턴
	- 데코레이터 패턴

	책: 헤드퍼스트 디자인패턴

참고)
Scanner

표준 입출력
1. 표준 입출력 (Standard Input/Output)
- System.in : InputStream
- System.out : PrintStream - 검정색	
- System.err : PrintStream - 빨간색
  setIn(InputSTream in) : 
  setOut(PrintStream out) : 표준 출력
  setErr(PrintStream out) : 표준 에러 출력

PrintStream 
 - println(...) : 출력 후 줄개행(\n)
 - print(...) : 출력만, 줄개행 X
 - printf(...) : 형식화 가능
	   %s : 문자열
	   %d : 정수
	   %c : char
	   %f : 실수

PrintWriter


2. 표준입출력의 대상변경 - setOut(), setErr(), setln()


File
- 자바에서는 File클래스를 통해서 파일과 디렉토리를 다룰 수 있도록 하고 있다

static final String separator : 디렉토리 구분 문자 - OS마다 다르게 사용되는 구분 문자를 현재 OS에 맞게 결정
			
			- 윈도우즈 : D:\폴더\파일명... : 구분 문자 : \
			- 리눅스 : /home/team/uplaods : 구분 문자 : /
			  맥OS

static final String pathSeparator : 환경 변수 구분 문자 - OS에 맞게 알아서 결정
				- 윈도우즈 :  ;
				- 리눅스 :  :
				  맥OS

.. : 상위 디렉토리

직렬화(Serialization)
- 직렬화란 객체를 데이터 스트림으로 만든 것을 뜻한다
