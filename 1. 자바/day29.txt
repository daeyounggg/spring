쓰레드
1. 프로세스와 쓰레드
	프로세스 : 실행 중인 프로그램 
					- OS로 부터 실행에 필요한 자원(메모리) 할당 
		

2. 멀티쓰레딩
	- CPU 사용율을 향상 
	- 자원의 효율성 
	- 사용자의 경험(응답성) 향상 
	
3. 멀티쓰레딩의 단점
	- 하나의 자원을 서로 공유 -> 동시성 문제 발생 
	
쓰레드의 구현과 실행
1. 구현 
	- Thread클래스를 상속
		java.lang.Thread 클래스
	
	- Runnable인터페이스를 구현
		
	
	참고)
		static Thread.currentThread() : 현재 실행 중인 쓰레드 
	
2. 쓰레드의 실행 - start()
	
	- start()와 run()
	
3. 싱글쓰레드와 멀티쓰레드
	
시분할 방식 


쓰레드의 우선순위
1. 쓰레드 우선순위 지정하기
	- 싱글 코어 : 정확하게 동작 
	- 멀티 코어는 : 정확하지 않다.
	
	1~10 : setPriortiy(1~10)
			  int getPriority() : 쓰레드의 우선순위 
			  
	MAX_PRIORITY : 10
	MIN_PRIORITY : 1
	NORM_PRIORITY : 5
	
2. 쓰레드 그룹(thread group)
	- 서로 관련된 쓰레드를 그룹으로 다루기 위한 것 
	- 모든 쓰레드는 쓰레드 그룹에 소속 
		ThreadGroup 

3. 데몬 쓰레드(daemon thread)
	- 다른 일반 쓰레드의 보조 쓰레드 
		- 다른 일반 쓰레드의 작업이 종료 -> 보조 쓰레드도 종료
		
		- GC(Garbage Collector) : 
		- 문서 자동 저장 기능 
			- 3초마다 문저 저장 		
		- 이벤트 루프
		
		setDaemon(true) : 데몬쓰레드 

쓰레드의 실행제어
1.  static  sleep(long millis
 - 실행중인 쓰레드 실행 지연

2. interrupt()와 interrupted()
interrupt() : interrupt : imterupted 상태값 true
imterrruptedException 발생
멈춰있는 쓰레드를 깨워즈는 역할

boolean isInterrupted() : interrupt 상태값( 상태값만 조회)

boolean Interrupted() : 상태값
			-> true -> false


3. suspend() - 일시정지, resume()- 다시시작 , stop()- 중지
start() - 시작


4. yield() 
 - 다음쓰레드에게 작업 양보
 - 응답성 향상

5. join()
 - 다른 쓰레드의 작업을 기다렸다가 끝나면 실행

쓰레드의 동기화
- synchronized를 이용한 동기화

synchronized : 메서드 접근 제어자 뒤쪽

volatile
 - CPU 코어의 캐시의 값을 사용 X, 직접메모리 (RAM)에서 접근
