JdbcTemplate
1. 설치 및 설정
1) spring-jdbc
	- 자원 해제 : 자동
	- SQLException : 엄격한 예외, 컴파일러에서 체크되는 예외
		: 예외가 발생하든 안하든 무조건 처리
	- DataAccessException
		- SQLException -> RuntimeException 형태로 변경
		
2) tomcat-jdbc
	- 커넥션 풀
		- 미리 연결 객체를 여러개 생성해서 필요할때마다 빌려주고, 회수하는 방식
		- 반응성, 성능 향상의 효과
		
		- DBMS에서 연결이 유지안되면 연결 종료 -> 커넥션 풀 객체의 연결 상태를 주기적으로 확인할 필요
		
2. DataSource 설정

3. JdbcTemplate을 이용한 쿼리 실행
- PreparedStatement
INSERT INTO member VALUES (?,?,?...)

1) query() : 데이터 목록 조회, SELECT 문
- List query(String sql, RowMapper rowMapper)
- List query(String sql, Object args[], RowMapper rowMapper)
- List query(String sql, RowMapper rowMapper, Object... args)

2) T queryForObject() : 데이터 레코드 한개, 단일값 - 통계 데이터 : 합계, 평균...
	- 조회된 데이터가 한개 레코드가 아니면 (0개 이거나 2개 이상 경우) : 예외 발생
	- try~catch로 예외처리
	
3) update() : 데이터 변경 쿼리 - INSERT, UPDATE, DELETE / 반환값은 반영된 레코드 갯수
- int update(String sql)
- int update(String sql, Object... args)

참고) 
	쿼리 수행시 기본적으로 로그는 출력 X
	slf4j api
	logback classic
	
	로그 레벨
	FATAL
	ERROR
	WARN
	INFO
	DEBUG
	TRACE
	
4. PreparedStatementCreator를 이용한 쿼리 실행

7. 트랜잭션 처리
	
SQL1
SQL2
SQL3
SQL4	

COMMIT -> DB에 영구 반영 

conn.setAutoCommit(false); // 추가 공통 기능 

pstmt.executeUpdate(...) // 핵심기능
pstmt.executeUpdate(...) // 핵심기능
pstmt.executeUpdate(...) // 핵심기능
pstmt.executeUpdate(...) // 핵심기능

conn.commit(); // 추가 공통 기능 

conn.rollback()
	
1) @Transactional
	- Proxy 구현(AOP)
2) PlatformTransactionManager
3) DataSourceTransactionManager

스프링 MVC
0. 의존성
	spring webmvc
	servlet-api
	servlet.jsp-api 
	jstl api + 구현체 
	
1. 톰캣 설정 
2. 스프링 MVC 설정
WebMvcConfigurer 인터페이스 
@EnableWebMvc


3. 코드 및 JSP 구현

4. 스프링 MVC 프레임워크 동작 방식
컨트롤러 빈
1) @Controller
2) Controller 인터페이스 구현체
3) HttpRequestHandler

5. WebMvcConfigurer 인터페이스와 설정
6. 정리
1) DispatcherServlet
2) HandlerMapping
3) HandlerMapping
4) ViewResolver


참고)

Ant 경로 패턴 
** : 현재 경로와 하위경로를 모두 포함한 모든 파일
예) /upload/**
		/upload/1.png
		/upload/sub/2.png

* : 현재 경로의 모든 파일
	/upload/*
	/upload/1.png

? : 글자 1개	
	예) /m?00
		-> /m100, /m200